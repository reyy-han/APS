========================MAIN========================

(add2.aps)
?- main.
Ecrit un programme: 
|: prog([echo(app(id(add),[num(42),app(id(add),[num(8),num(42)])]))]).
|> Memoire: []
|> Resultat: [92]
true.

(add.aps)
?- main.
Ecrit un programme: 
|: prog([echo(if(id(true),app(id(add),[app(id(mul),[num(42),num(3)]), num(40)]),app(id(sub),[app(id(div),[num(4),num(2)]),num(42)])))]).
|> Memoire: []
|> Resultat: [166]
true.

(def.aps)
?- main.
Ecrit un programme: 
|: prog([const(id(x),bool,id(true)),echo(num(0))]).
|> Memoire: []
|> Resultat: [0]
true.

(eq.aps)// erreur au typage car on a pas le droit de faire Echo false, mais en semantique il voit un inZ(0), donc passe
?- main.
Ecrit un programme: 
|: prog([echo(app(id(eq),[num(45),num(4)]))]).
|> Memoire: []
|> Resultat: [0]
true.

(fun.aps)
?- main.
Ecrit un programme: 
|: prog([fun(id(f),int,[(id(t),int)],app(id(add),[id(t),num(1)])),echo(app(id(f),[num(2)]))]).
|> Memoire: []
|> Resultat: [3]
true.

(fun2.aps)
?- main.
Ecrit un programme: 
|: prog([fun(id(f),int,[(id(t),int),(id(y),int),(id(g),bool)],app(id(add),[id(t),num(1)])),echo(app(id(f),[num(1),num(2),num(3)]))]).
|> Memoire: []
|> Resultat: [2]
true.

(funrec.aps)
?- main.
Ecrit un programme: 
|: prog([funrec(id(f),int,[(id(t),int)],if(app(id(eq),[id(t),num(2)]),id(t),app(id(f),[app(id(add),[id(t),num(1)])]))),echo(app(id(f),[num(1)]))]).
|> Memoire: []
|> Resultat: [2]
true.

(if.aps)
?- main.
Ecrit un programme: 
|: prog([echo(if(id(true),num(10),num(15)))]).
|> Memoire: []
|> Resultat: [10]
true.

(if2.aps)
?- main.
Ecrit un programme: 
|: prog([echo(if(id(true),app(id(add),[num(45),num(26)]),lambda([(id(t),int)],app(id(add),[id(t),num(5)]))))]).
|> Memoire: []
|> Resultat: [71]
true.

// si if à false
?- main.
Ecrit un programme: 
|: prog([echo(if(id(false),app(id(add),[num(45),num(26)]),lambda([(id(t),int)],app(id(add),[id(t),num(5)]))))]).
|> Memoire: []
|> Resultat: [inF(app(id(add),[id(t),num(5)]),[id(t)],[])]
true.

(lambda.aps)
?- main.
Ecrit un programme: 
|: prog([echo(lambda([(id(f),int),(id(g),int)],app(id(add),[id(f),num(5)])))]).
|> Memoire: []
|> Resultat: [inF(app(id(add),[id(f),num(5)]),[id(f),id(g)],[])]
true.

(lambda2.aps)
?- main.
Ecrit un programme: 
|: prog([echo(lambda([(id(x1),int),(id(x2),int),(id(b1),bool),(id(b2),bool)],if(id(false),app(id(add),[id(x1),id(x2)]),app(id(mul),[id(x1),id(x2)]))))]).
|> Memoire: []
|> Resultat: [inF(if(id(false),app(id(add),[id(x1),id(x2)]),app(id(mul),[id(x1),id(x2)])),[id(x1),id(x2),id(b1),id(b2)],[])]
true.


(lambda_fun_const.aps)
?- main.
Ecrit un programme: 
|: prog([const(id(x),int,num(6)),fun(id(g),int,[(id(t),int)],app(id(mul),[num(7),id(t)])),echo(lambda([(id(x),int)],app(id(add),[num(0),app(id(g),[id(x)])])))]).
|> Memoire: []
|> Resultat: [inF(app(id(add),[num(0),app(id(g),[id(x)])]),[id(x)],[(g,inF(app(id(mul),[num(7),id(t)]),[id(t)],[(x,6)])),(x,6)])]
true.

(lt.aps) erreur au typage car on ne peut pas faire echo false / Mais inZ(1) en semantique
?- main.
Ecrit un programme: 
|: prog([echo(app(id(lt),[num(4),num(5)]))]).
|> Memoire: []
|> Resultat: [1]
true.

(minitest_set.aps) 
// fonctionne au typage / Mais à la semantique, le set demande une variable et non pas une constante
?- main.
Ecrit un programme: 
|: prog([const(id(x),bool,id(false)),set(id(x),id(true)),echo(num(1))]).
false.

//Quand on change le const en var
 ?- main.
Ecrit un programme: 
|: prog([var(id(x),bool),set(id(x),id(true)),echo(id(x))]).
|> Memoire: [(0,1)]
|> Resultat: [1]
true.

 ?- main.
Ecrit un programme: 
|: prog([var(id(x),bool),set(id(x),id(true)),echo(num(1))]).
|> Memoire: [(0,1)]
|> Resultat: [1]
true.
 

(minitest_var.aps)
 ?- main.
Ecrit un programme: 
|: prog([var(id(x),int),echo(num(2))]).
|> Memoire: [(0,any)]
|> Resultat: [2]
true.

(not.aps) //erreur au typage / 0 à la semantique 
?- main.
Ecrit un programme: 
|: prog([echo(app(id(not),[id(true)]))]).
|> Memoire: []
|> Resultat: [0]
true.


// Exception au test semantique car le set n'est pas dans le bon format (ici on utilise pas lvalue)
(proc_adr.aps)
 ?- main.
Ecrit un programme: 
|    prog([proc(id(p),[(id(x),int),(var_id(y),int)],[set(id(y),app(id(add),[id(x),id(y)]))]),var(id(z),int),set(id(z),num(3)),call(id(p),[id(z),adr(z)]),echo(id(z))]).
|> Memoire: [(0,6)]
|> Resultat: [6]
true.

(proc_call.aps)
 ?- main.
Ecrit un programme: 
|: prog([proc(id(p),[(id(x),int),(id(y),bool)],[echo(num(0))]),call(id(p),[num(42),id(true)]),call(id(p),[num(42),id(false)])]).
|> Memoire: []
|> Resultat: [0,0]
true.

 ?- main.
Ecrit un programme: 
|: prog([proc(id(p),[(id(x),int),(id(y),bool)],[echo(id(x))]),call(id(p),[num(42),id(true)]),call(id(p),[num(42),id(false)])]).
|> Memoire: []
|> Resultat: [42,42]
true.

(procrec_statif_var_set_call.aps) // ko typage / ko erreur a la sematique car dans proc de p, x n'est pas indiqué comme var (APS1a)
 ?- main.
Ecrit un programme: 
|: prog([procrec(id(p),[(id(x),int),(id(y),bool)],[stat_if(id(y),[echo(id(x)),set(id(x),app(id(add),[id(x),num(1)]))],[set(id(x),app(id(add),[id(x),num(1)])),call(id(p),[id(x),app(id(not),[id(y)])])])]),var(id(a),int),set(id(a),num(42)),call(id(p),[id(a),id(false)]),echo(id(a))]).

false.

(procrec_statif_var_set_call2.aps) // maintenant si on utilise var et adr
 ?- main.Ecrit un programme: 
|    prog([procrec(id(p),[(var_id(x),int),(id(y),bool)],[stat_if(id(y),[echo(id(x)),set(id(x),app(id(add),[id(x),num(1)]))],[set(id(x),app(id(add),[id(x),num(1)])),call(id(p),[adr(x),app(id(not),[id(y)])])])]),var(id(a),int),set(id(a),num(42)),call(id(p),[adr(a),id(false)]),echo(id(a))]).
|> Memoire: [(0,44)]
|> Resultat: [44,43]
true.

(proc_stat_if_call.aps)
 ?- main.Ecrit un programme: 
|: prog([proc(id(p),[(id(x),int),(id(y),bool)],[stat_if(id(y),[echo(num(0))],[echo(id(x))])]),call(id(p),[num(42),id(true)]),call(id(p),[num(42),id(false)])]).
|> Memoire: []
|> Resultat: [42,0]
true.

(proc_while_call.aps) // tourne en boucle + probleme de set qui a besoin d'un VAR avant (ajuster en APS1a)
a la place, on teste avec:
prog([var(id(x),int),set(id(x),num(0)),proc(id(p),[(id(x),int)],[while(app(id(lt),[id(x),num(5)]),[set(id(x),app(id(add),[id(x),num(1)])),echo(id(x))])]),call(id(p),[num(0)])]).

 ?- main.
Ecrit un programme: 
|: prog([var(id(x),int),set(id(x),num(0)),proc(id(p),[(id(x),int)],[while(app(id(lt),[id(x),num(5)]),[set(id(x),app(id(add),[id(x),num(1)])),echo(id(x))])]),call(id(p),[num(0)])]).
|> Memoire: [(0,5)]
|> Resultat: [5,4,3,2,1]
true.


(prog0.aps)
 ?- main.
Ecrit un programme: 
|: prog([echo(num(42))]).
|> Memoire: []
|> Resultat: [42]
true.
-

(prog1.aps) //erreur attendue car id(x) n'existe pas dans le contexte
 ?- main.
Ecrit un programme: 
|: prog([echo(id(x))]).
false.


(prog2.aps) // meme erreur que prog1.aps
 ?- main.
Ecrit un programme: 
|: prog([echo(app(id(add),[id(x),num(42)]))]).
false.

// on indique avec un CONST que id(x) = num(21)
 ?- main.
Ecrit un programme: 
|: prog([const(id(x),int,num(21)),echo(app(id(add),[id(x),num(42)]))]).
|> Memoire: []
|> Resultat: [63]
true.

(prog4.aps)
 ?- main.
Ecrit un programme: 
|: prog([echo(app(id(add),[app(id(mul),[num(42),num(1)]),app(id(sub),[app(id(div),[num(14),num(2)]),num(42)])]))]).
|> Memoire: []
|> Resultat: [7]
true.

(proc_fun_const.aps)
 ?- main.
Ecrit un programme: 
|: prog([const(id(x),int,num(6)),fun(id(g),int,[(id(t),int)],app(id(mul),[num(7),id(t)])),echo(app(id(add),[num(0),app(id(g),[id(x)])]))]).
|> Memoire: []
|> Resultat: [42]
true.

(proc_set_fun.aps)
 ?- main.Ecrit un programme: 
|: prog([var(id(x),bool),set(id(x),id(true)),set(id(x),app(id(not),[id(x)])),fun(id(b2i),int,[(id(b),bool)],if(id(b),num(1),num(0))),echo(app(id(b2i),[id(x)]))]).
|> Memoire: [(0,0)]
|> Resultat: [0]
true.

(types.aps) // erreur au typage + erreur a la semantique car id(p) n'est pas declarer
A la place, on teste : 
prog([fun(id(p),bool,[(id(b1),bool),(id(b2),bool)],if(id(b1),id(b2),id(b1))),const(id(y),arc([bool,bool],bool),id(p)),echo(id(y))]).

Qui retourne :
 ?- main.
Ecrit un programme: 
|: prog([fun(id(p),bool,[(id(b1),bool),(id(b2),bool)],if(id(b1),id(b2),id(b1))),const(id(y),arc([bool,bool],bool),id(p)),echo(id(y))]).
|> Memoire: []
|> Resultat: [inF(if(id(b1),id(b2),id(b1)),[id(b1),id(b2)],[])]
true.

(typesfun.aps)
 ?- main.
Ecrit un programme: 
|: prog([echo(lambda([(id(f),arc([int,int],int))],app(id(mul),[num(2),num(10)])))]).
|> Memoire: []
|> Resultat: [inF(app(id(mul),[num(2),num(10)]),[id(f)],[])]
true.

(var_set_echo.aps)
 ?- main.
Ecrit un programme: 
|: prog([var(id(x),int),set(id(x),num(42)),echo(id(x))]).
|> Memoire: [(0,42)]
|> Resultat: [42]
true.

(stat_if.aps)
 ?- main.
Ecrit un programme: 
|: prog([stat_if(id(true),[echo(num(2))],[echo(num(1))])]).
|> Memoire: []
|> Resultat: [2]
true.

// si on change true à false
 ?- main.
Ecrit un programme: 
|: prog([stat_if(id(false),[echo(num(2))],[echo(num(1))])]).
|> Memoire: []
|> Resultat: [1]
true.

(while.aps)
On ne peut pas tester "prog([while(id(true),[echo(num(1))])])." car boucle à l'infini.
(on a vu un test avec un while dans proc_while_call.aps)

========================MAIN=APS2========================

(const_alloc1.aps)
 ?- main.
Ecrit un programme: 
|: prog([const(id(x),vec(bool),alloc(num(3)))]).
|> Memoire: [(2,any),(1,any),(0,any)]
|> Resultat: []
true.

(const_alloc2.aps)
 ?- main.
Ecrit un programme: 
|: prog([const(id(x),vec(int),alloc(num(10)))]).
|> Memoire: [(9,any),(8,any),(7,any),(6,any),(5,any),(4,any),(3,any),(2,any),(1,any),(0,any)]
|> Resultat: []
true.

(const_alloc_false.aps) // cet exemple renvoie false au typage mais est accepté à l'evaluation car le true est vu comme l'entier 1.
 ?- main.
Ecrit un programme: 
|: prog([const(id(x),vec(int),alloc(id(true)))]).
|> Memoire: [(0,any)]
|> Resultat: []
true.

(const_echo_nth.aps)
 ?- main.
Ecrit un programme: 
|: prog([const(id(x),vec(int),alloc(num(3))),echo(nth(id(x),num(0)))]).
|> Memoire: [(2,any),(1,any),(0,any)]
|> Resultat: [any]
true.

(const_echo_nth_false.aps) // erreur au typage car le tableau est de type vec(bool) et qu'il n'a pas le droit d'afficher un booleen mais ici à l'evalutation il n'y a pas de probleme.
 ?- main.
Ecrit un programme: 
|: prog([const(id(x),vec(bool),alloc(num(3))),echo(nth(id(x),num(0)))]).
|> Memoire: [(2,any),(1,any),(0,any)]
|> Resultat: [any]
true.

(const_echo_len.aps)
 ?- main.
Ecrit un programme: 
|: prog([const(id(x),vec(bool),alloc(num(3))),echo(len(id(x)))]).
|> Memoire: [(2,any),(1,any),(0,any)]
|> Resultat: [3]
true.

(test_aps2_old.aps)
 ?- main.
Ecrit un programme: 
|: prog([const(id(x),vec(bool),alloc(num(3))),set(lvnth(id(x),num(0)),id(true)),set(lvnth(id(x),num(1)),id(false)),set(lvnth(id(x),num(2)),id(true))]).
|> Memoire: [(2,1),(1,0),(0,1)]
|> Resultat: []
true.

 ?- main.Ecrit un programme: 
|: prog([const(id(x),vec(bool),alloc(num(3))),set(lvnth(id(x),num(0)),id(true)),set(lvnth(id(x),num(1)),id(false)),set(lvnth(id(x),num(2)),id(true)),echo(len(id(x)))]).
|> Memoire: [(2,1),(1,0),(0,1)]
|> Resultat: [3]
true.
=====================AUTRES+EXEMPLES=====================

 ?- main.Ecrit un programme: 
|: prog([const(id(x),vec(int),alloc(num(3))),set(lvnth(id(x),num(0)),num(2000)),set(lvnth(id(x),num(1)),num(10)),set(lvnth(id(x),num(2)),num(21)),echo(nth(id(x),num(2)))]).
|> Memoire: [(2,21),(1,10),(0,2000)]
|> Resultat: [21]
true.

 ?- main.Ecrit un programme: 
|: prog([const(id(x),vec(bool),alloc(num(3))),set(lvnth(id(x),num(0)),id(true)),set(lvnth(id(x),num(1)),id(false)),set(lvnth(id(x),num(2)),id(true)),echo(len(id(x)))]).
|> Memoire: [(2,1),(1,0),(0,1)]
|> Resultat: [3]
true.


?- main.
Ecrit un programme: 
|: prog([echo(num(5))]).
|> Memoire: []
|> Resultat: [5]
true.
